# fall 1: die bin ist kleiner als die band
((bin_data$Start >= cytobands$Start[c] & bin_data$End <= cytobands$End[c]) |
# fall 2: die bin ist zwischen 2 bands, liegt aber eher in der betrachteten bin,
# weil das ende von der bin naeher zum ende der band liegt, als der
# anfang zum anfang der naechsten
# die 2. bedingung wurde eingebaut, um zu verhindern, dass die bins vor der aktuellen
# band mitselektiert werden
((bin_data$Start < cytobands$End[c]) &
(bin_data$End > cytobands$Start[c]) &
((cytobands$End[c] - bin_data$Start) >= (bin_data$End - cytobands$End[c]))) |
# fall 3: die bin ist zwischen 2 bands, liegt aber eher in der
# betrachteten bin
# weil der anfang von der bin naeher zum anfang der band liegt, als das ende
((bin_data$Start < cytobands$Start[c]) &
((bin_data$End - cytobands$Start[c]) > (cytobands$Start[c] - bin_data$Start))))
# fall 4: die band ist kleiner als die bin,
# dann greift die bedingung 2 oder 3, je nach werten
band.pat = bin_data[sel, "patient"]
#band.pon = colSums((bin_data[sel, grep(".bam", colnames(bin_data))]), na.rm = TRUE)
band.pon = colSums((bin_data[sel, grep("V", colnames(bin_data))]), na.rm = TRUE)
sum_pat = sum(band.pat, na.rm = TRUE)
# summe der werte der bins in dieser band fuer den patienten
sum_pon = mean(band.pon, na.rm = TRUE)
# mittelwert der summe der bins in dem pon
sd_bands = sd(band.pon, na.rm = TRUE)
# standartabweichung fur die bins in der band
if (sum_pat > sum_pon + sd_factor*sd_bands) {
direction = +1 # die bande ist amp
}
else if (sum_pat < sum_pon - sd_factor*sd_bands) {
direction = -1 # die bande ist del
}
bands[nrow(bands) + 1, ] = list(as.character(cytobands$Chr[c]),
as.character(cytobands$Name[c]),
cytobands$Start[c],
cytobands$End[c],
sum_pat,
sum_pon,
direction)
direction = 0
}
return(bands)
}
# SCHRITT 9
# Hier werden Banden zusammengefasst und fuer den Report vorbereitet
karyotype = function(bands) {
suspected_bands = bands[bands$Direction != 0, ]
# bands mergen, wie bei den regions, nur ohne statistische validierung
suspected_bands$last_Name = suspected_bands$Name
karyotype_to_report = suspected_bands[1, ]
karyotype_to_report$Aberration = NA
if(nrow(suspected_bands) < 1) return(karyotype_to_report)
k = 1
# der zaehler in der tabelle karyotype_to_report
for (s in 2:nrow(suspected_bands)) {
if (karyotype_to_report$Chr[k] == suspected_bands$Chr[s] &
karyotype_to_report$Direction[k] == suspected_bands$Direction[s] &
karyotype_to_report$End[k] == suspected_bands$Start[s]) {
karyotype_to_report$last_Name[k] = suspected_bands$Name[s]
karyotype_to_report$End[k] = suspected_bands$End[s]
next
}
else {
karyotype_to_report[nrow(karyotype_to_report) +1, ] = suspected_bands[s, ]
# die bande auf einem neuen chr oder mit einer anderen richtung hinzufuegen
k = nrow(karyotype_to_report)
# das ist jetzt die bande, von der aus betrachtet wird
}
}
for (a in 1:nrow(karyotype_to_report)) {
karyotype_to_report[a, "Aberration"] = as.character(paste0(karyotype_to_report$Direction[a], "(",
suspected_bands$Chr[a], ")(",
suspected_bands$Name[a],
suspected_bands$last_Name[a], ")"))
}
karyotype_to_report$Aberration = as.character(paste0(ifelse(karyotype_to_report$Direction == 1, "add", "del"), "(",
karyotype_to_report$Chr, ")(",
karyotype_to_report$Name,
karyotype_to_report$last_Name, ")"))
return(karyotype_to_report)
}
# SCHRITT 10
# Die Gene, die in den abweichenden Banden liegen, werden detektiert
# und an eine Tabelle Ã¼bergeben
genes_finder = function(bin_data, all_genes, cancer_genes, sd_factor) {
suspected_bins <- data.frame(Chr=character(), Start=integer(), End=integer(), Bin=integer(),
Aberration=character(), stringsAsFactors = F)
# Hier werden alle Bins gespeichert, die von pon_mean +/- 3*SD abweichen
g=0
for (g in 1:nrow(bin_data)) {
if (!is.na(bin_data$patient[g]) &
(bin_data$patient[g] < (bin_data$mean[g] - sd_factor * bin_data$sd[g]))) {
suspected_bins[nrow(suspected_bins) + 1, ] = list(as.character(bin_data$Chr[g]),
bin_data$Start[g],
bin_data$End[g],
bin_data$patient[g],
as.character("del"))
}
else if (!is.na(bin_data$patient[g]) &
(bin_data$patient[g] > (bin_data$mean[g] + sd_factor * bin_data$sd[g]))) {
suspected_bins[nrow(suspected_bins) + 1, ] = list(as.character(bin_data$Chr[g]),
bin_data$Start[g],
bin_data$End[g],
bin_data$patient[g],
as.character("amp"))
}
}
special_genes = all_genes[all_genes$symbol %in% cancer_genes$genes,]
special_genes$aberration = 'norm'
special_genes$found = 0
for(i in 1:nrow(special_genes)) {
bins = suspected_bins[suspected_bins$Chr == special_genes$chr[i] & (suspected_bins$Start <= special_genes$start[i] & special_genes$start[i] <= suspected_bins$End |
suspected_bins$Start <= special_genes$end[i] & special_genes$end[i] <= suspected_bins$End),]
if(nrow(bins) == 0) {next}
special_genes$found[i] = 1
if(all(bins$Aberration == 'amp')) {special_genes$aberration[i] = 'amp'}
if(all(bins$Aberration == 'del')) {special_genes$aberration[i] = 'del'}
}
reported_genes = special_genes[special_genes$found == 1 & (special_genes$aberration == "amp" | special_genes$aberration == "del"), ]
return(reported_genes)
}
# SCHRITT 11
# Diese Funktion soll die Plots generieren. Bestandteile des Plots zur Zeit sind:
# 1) Punkte aus den gemappten Patientendaten
# 2) Eine Linie fuer die PON-Daten
# 3) Errorbar fuer 3*SD der PON-Daten an dieser Stelle
# 4) Del/amp Regionen
# 5) Ein Ideogram zur besseren raemlichen Orientierung fuer die Kliniker
plot_bins_regions_ideogram <- function(bin_data, cytobands, region_merged,
chrn, sd_factor) {
x <- bin_data[bin_data$Chr == chrn, "Start"]
y <- bin_data[bin_data$Chr == chrn, "patient"]
plot_patient <- qplot(x, y, ylim=c(-1, 6)) +
geom_line(aes(x = bin_data[bin_data$Chr == chrn, "Start"],
y = bin_data[bin_data$Chr == chrn, "mean"]),
color = "gray", linetype = "solid") +
geom_errorbar(aes(x = bin_data[bin_data$Chr == chrn, "Start"],
ymin = bin_data[bin_data$Chr == chrn, "mean"] -
sd_factor * bin_data[bin_data$Chr == chrn, "sd"],
ymax = bin_data[bin_data$Chr == chrn, "mean"] +
sd_factor * bin_data[bin_data$Chr == chrn, "sd"]),
width=0.1, color = "gray", alpha = 0.9, na.rm = TRUE) +
# na.rm = TRUE bedeutet, dass die fehlenden Werte keine fehlermeldungen mehr verursachen
geom_point(aes(x = x, y = bin_data[bin_data$Chr == chrn, "patient"]),
shape = 19, color = "red", size = 1) +
#das eigentliche ideogram
geom_rect(data = cytobands[cytobands$Chr == chrn, ],
stat = "identity", position = "identity",
aes(NULL, NULL, xmin = Start, xmax = End, fill = Band.type),
ymin = -0.6, ymax = -0.2, color = "gray", size = 0.5, alpha = 0.4) +
scale_fill_manual(values=c("acen" = "#2b8cbe", "gneg" = "#f7f7f7",
"gpos100" = "#252525", "gpos25" = "#cccccc",
"gpos50" = "#969696", "gpos75" = "#636363",
"gvar" = "#045a8d", "stalk" = "#be8c2b",
"add" = "blue", "del" = "red")) +
# die regione einzeichnen
geom_rect(data = region_merged[region_merged$Chr == chrn,],
aes(NULL, NULL, xmin = Start, xmax = End, fill = Direction),
ymin = 1,
ymax = 3,
color = "gray", size = 0.5, alpha = 0.4) +
theme_bw() +
labs(title = "Plot patient vs PON with 3*SD", subtitle = chrn,
x = "Regions", y = "Mappable Reads")
print(plot_patient)
return(plot_patient)
}
# SCHRITT 12
# Eine Schleife, um die Plots fÃ¼r alle Chromosomen zu erstellen
# und diese in einem neuen Ordner zu speichern
create.plots <- function(path.output, patient_name, bin_data, cytobands, region_merged, sd_factor) {
setwd(path.output)
dir.create(paste0("Patient.", patient_name))
setwd(paste0("Patient.", patient_name))
chrn= "chr0"
for (chrn in unique(bin_data$Chr)) {
plot_patient = plot_bins_regions_ideogram(bin_data, cytobands, region_merged,
chrn, sd_factor)
ggsave(filename = paste0("Plot.", chrn, ".png"))
}
}
# SCHRITT 15
# Plot Uebersicht ueber alle Chromosomen nebeneinander
# Die Bins als Punkte, keine PON-Daten
# Patienten-Daten normalisiert auf 0
# Die Y-Achse geht von 1 bis -1
# Die amp/del Bins weichen nach obenm oder unten ab, sind farblich markiert
# Duenne graue Linien am Ende jedes Chromosoms
# Die X-Achse als die Koordinaten im ganzen Genom
# Unterhalb der X-Achse die Chromosomen-Nummern
# Eine Amplifikation hat mehr Gen-Kopien als Gain, diese Aufteilung (siehe Fig. 1 im iCHORcna Paper)
# sollte auch von uns beibehalten werden.
plot_genome_wide_cnv = function(bin_data) {
# eine Tabelle mit den globalen Koordinaten fuer alle Chromosomen
coordinates_genome_wide <- data.frame(Chr=character(), Start=integer(), End=integer(), Offset=integer(),
stringsAsFactors = F)
for (w in unique(bin_data$Chr)) {
coordinates_genome_wide[nrow(coordinates_genome_wide) + 1, ] = list(as.character(w),
0,
0,
0)
}
# die Koordinaten fuer die Enden setzen
coordinates_genome_wide[ , "End"] = sapply(coordinates_genome_wide$Chr, function (c) max(bin_data[bin_data$Chr == c, "End"]))
# die versetzten Koordinaten setzen - so entstehen globale Koordinaten
# coordinates_genome_wide[ , 4] = cumsum(1:(nrow(coordinates_genome_wide)-1))
coordinates_genome_wide[ , "Offset"] = cumsum(as.numeric(coordinates_genome_wide[ , "End"]))
coordinates_genome_wide[ , "Offset"] = c(0, coordinates_genome_wide[(1:nrow(coordinates_genome_wide)-1), "Offset"])
coordinates_genome_wide[ , "global_End"] = cumsum(as.numeric(coordinates_genome_wide[ , "End"]))
for (z in 1:nrow(coordinates_genome_wide)) {
coordinates_genome_wide[z, "median"] = (coordinates_genome_wide[z, "Offset"] + coordinates_genome_wide[z, "global_End"])/2
}
bin_data$Offset = sapply(bin_data$Chr, function(c) coordinates_genome_wide$Offset[coordinates_genome_wide$Chr == c])
bin_data$global_Start = bin_data$Start+bin_data$Offset
# die koordinaten fuer die bins sind damit festgelegt, die vorbereitung ist abgeschlossen
# plotten!
#bin_data$pat_norm <- (bin_data[ , "patient"]/ median(bin_data[ , "patient"]))*2
# muessen wir hier nochmals normalisieren? ich glaube, nicht.
plot_all_chromosomes <- qplot(global_Start, patient,
data = bin_data[bin_data$aberration == "normal", ], ylim=c(0, 5)) +
geom_point(data = bin_data[bin_data$aberration == "add", ],
aes(x = bin_data[bin_data$aberration == "add", "global_Start"],
y = bin_data[bin_data$aberration == "add", "patient"], color = "blue")) +
geom_point(data = bin_data[bin_data$aberration == "del", ],
aes(x = bin_data[bin_data$aberration == "del", "global_Start"],
y = bin_data[bin_data$aberration == "del", "patient"], color = "orange")) +
geom_rect(data = coordinates_genome_wide,
aes(NULL, NULL, xmin = Offset, xmax = global_End,
ymin = 0,
ymax = 5),
color = "white", size = 0.5, alpha = 0.1) +
geom_text(data = coordinates_genome_wide,
aes(x = median, y = c(4.8, 4.5, 4.2, 4.8, 4.5, 4.2, 4.8, 4.5, 4.2, 4.8, 4.5, 4.2, 4.8, 4.5, 4.2, 4.8, 4.5, 4.2, 4.8, 4.5, 4.2, 4.8, 4.5, 4.2) , label = Chr), size = 3) +
theme_bw() +
theme(panel.grid.minor=element_blank(), axis.text.x = element_blank(), legend.position="none") +
scale_x_discrete(breaks = coordinates_genome_wide[ , "Offset"],
labels = coordinates_genome_wide[ , "Chr"]) +
labs(title = "Plot all chromosomes", x = "Chromosomes", y = "Reads")
return(plot_all_chromosomes)
}
bin_data = pon.gender.adjust(bin_data, gender)
patient = patient_normalization(patient, 6)
bin_data = unite.data(bin_data, patient)
sd_factor = 3
bin_data = aberration.bins.identifier(bin_data, sd_factor)
regions = region_bring_together(bin_data, sd_factor)
region_merged = region_merge(bin_data, regions, sd_factor)
bands = bins2bands(bin_data, cytobands, sd_factor)
karyotype_to_report = karyotype(bands)
reported_genes = genes_finder(bin_data, all_genes, cancer_genes, sd_factor)
# create.plots(path.output, patient_name, bin_data, cytobands, region_merged, sd_factor)
plot_all_chromosomes = plot_genome_wide_cnv(bin_data)
kable(karyotype_to_report$Aberration, col.names = NULL, align = "l", "html")
karyotype = function(bands) {
suspected_bands = bands[bands$Direction != 0, ]
# bands mergen, wie bei den regions, nur ohne statistische validierung
suspected_bands$last_Name = suspected_bands$Name
karyotype_to_report = suspected_bands[1, ]
karyotype_to_report$Aberration = NA
if(nrow(suspected_bands) < 1) return(karyotype_to_report)
k = 1
# der zaehler in der tabelle karyotype_to_report
for (s in 2:nrow(suspected_bands)) {
if (karyotype_to_report$Chr[k] == suspected_bands$Chr[s] &
karyotype_to_report$Direction[k] == suspected_bands$Direction[s] &
karyotype_to_report$End[k] == suspected_bands$Start[s]) {
karyotype_to_report$last_Name[k] = suspected_bands$Name[s]
karyotype_to_report$End[k] = suspected_bands$End[s]
next
}
else {
karyotype_to_report[nrow(karyotype_to_report) +1, ] = suspected_bands[s, ]
# die bande auf einem neuen chr oder mit einer anderen richtung hinzufuegen
k = nrow(karyotype_to_report)
# das ist jetzt die bande, von der aus betrachtet wird
}
}
for (a in 1:nrow(karyotype_to_report)) {
karyotype_to_report[a, "Aberration"] = as.character(paste0(karyotype_to_report$Direction[a], "(",
suspected_bands$Chr[a], ")(",
suspected_bands$Name[a],
suspected_bands$last_Name[a], ")"))
}
karyotype_to_report$Aberration = as.character(paste0(ifelse(karyotype_to_report$Direction == 1, "add", "del"),
sub("chr", "", karyotype_to_report$Chr),"(",
karyotype_to_report$Name,
karyotype_to_report$last_Name, ")"))
return(karyotype_to_report)
}
karyotype_to_report = karyotype(bands)
kable(karyotype_to_report$Aberration, col.names = NULL, align = "l", "html")
# SCHRITT 9
# Hier werden Banden zusammengefasst und fuer den Report vorbereitet
karyotype = function(bands) {
suspected_bands = bands[bands$Direction != 0, ]
# bands mergen, wie bei den regions, nur ohne statistische validierung
suspected_bands$last_Name = suspected_bands$Name
karyotype_to_report = suspected_bands[1, ]
karyotype_to_report$Aberration = NA
if(nrow(suspected_bands) < 1) return(karyotype_to_report)
k = 1
# der zaehler in der tabelle karyotype_to_report
for (s in 2:nrow(suspected_bands)) {
if (karyotype_to_report$Chr[k] == suspected_bands$Chr[s] &
karyotype_to_report$Direction[k] == suspected_bands$Direction[s] &
karyotype_to_report$End[k] == suspected_bands$Start[s]) {
karyotype_to_report$last_Name[k] = suspected_bands$Name[s]
karyotype_to_report$End[k] = suspected_bands$End[s]
next
}
else {
karyotype_to_report[nrow(karyotype_to_report) +1, ] = suspected_bands[s, ]
# die bande auf einem neuen chr oder mit einer anderen richtung hinzufuegen
k = nrow(karyotype_to_report)
# das ist jetzt die bande, von der aus betrachtet wird
}
}
for (a in 1:nrow(karyotype_to_report)) {
karyotype_to_report[a, "Aberration"] = as.character(paste0(karyotype_to_report$Direction[a], "(",
suspected_bands$Chr[a], ")(",
suspected_bands$Name[a],
suspected_bands$last_Name[a], ")"))
}
karyotype_to_report$Aberration = as.character(paste0(ifelse(karyotype_to_report$Direction == 1, "add", "del"), "(",
sub("chr", "", karyotype_to_report$Chr),")(",
karyotype_to_report$Name,
karyotype_to_report$last_Name, ")"))
return(karyotype_to_report)
}
karyotype_to_report = karyotype(bands)
kable(karyotype_to_report$Aberration, col.names = NULL, align = "l", "html")
View(karyotype_to_report)
order(karyotype_to_report, method = "auto")
order(karyotype_to_report, method = "shell")
sort(karyotype_to_report$Chr)
sort(karyotype_to_report$Chr, method = "auto")
sort(karyotype_to_report$Chr, method = "shell")
sort(karyotype_to_report$Chr, method = "quick")
sort(karyotype_to_report$Chr, method = "radix")
sort(karyotype_to_report$Chr, decreasing = FALSE)
path.to.programm = "/media/vera/big_data/coriandR"
path.output = "/media/vera/big_data/coriandR/tables/pon.size.detection/"
pon.table.name = "pon.marburg.3p.median.tsv"
setwd(path.to.programm)
pon = read.table("./tables/pon.size.detection/pon.marburg.3p.fc.tsv", header = TRUE, row.names = 1)
# grep('.bam', colnames(pon))
gender_pon = read.table("./tables/pon.size.detection/geschlechter.pon.marburg.3p.csv",
header = TRUE, sep = ",", row.names = 1)
panel_of_normals_normalization <- function(pon) {
#pon_norm <- t(t(pon[ , 6:ncol(pon)]) / colSums(pon[ , 6:ncol(pon)])) * (pon[1, 3] - pon[1, 2] + 1)
# alter ansatz, jetzt normalisieren wir Ã¼ber median
pon_norm <- pon[ , 1:5]
for (c in 6:ncol(pon)) {
pon_norm[ , c] <- pon[ , c] / median(pon[ , c]) *2
}
#pon_norm <- cbind(pon[ , 1:5], pon_norm)
# Die laenge der bins wird aus der Differenz automatisch ermittelt
return(pon_norm)
}
# PON nach den Geschlechtern trennen
# Hierbei werden die X- und Y-Chromosome in 4 Chromosomen (chrX_F, chrX_M, chrY_F, chrY_M) aufgeteilt
# diese werden je nach Geschlecht mit den Werten aus der eigentlichen Patiententabelle gefÃ¼llt
gendering_pon <- function(pon, gender_pon) {
# gender_pon ist eine tabelle mit den spaltennamen im PON und mit den dazugehoerigen geschlechtern
# zuerst das X-Chromosom in chrX_F und chrX_M aufteilen
chrn = "chrX"
# in eine separate tabelle werden alle zeilen von x-chr reingepackt
pon.copy = pon[pon$Chr == chrn, ]
# allen zeilen wird der suffix "_M" zugewiesen
pon.copy$Chr = paste0(pon.copy$Chr, "_M")
# nur die maenner sollten die werte fuer chrX_M behalten
pon.copy[, 6:ncol(pon.copy)][, gender_pon$sex == "F"] = NA
pon.new = rbind(pon, pon.copy)
pon.copy = pon[pon$Chr == chrn, ]
pon.copy$Chr = paste0(pon.copy$Chr, "_F")
pon.copy[, 6:ncol(pon.copy)][, gender_pon$sex == "M"] = NA
# pon.new ist jetzt um 2 "X-chr" groesser
pon.new = rbind(pon.new, pon.copy)
# dann Y-Chromosom
chrn = "chrY"
pon.copy = pon[pon$Chr == chrn, ]
pon.copy$Chr = paste0(pon.copy$Chr, "_M")
pon.copy[, 6:ncol(pon.copy)][, gender_pon$sex == "F"] = NA
pon.new = rbind(pon.new, pon.copy)
pon.copy = pon[pon$Chr == chrn, ]
pon.copy$Chr = paste0(pon.copy$Chr, "_F")
pon.copy[, 6:ncol(pon.copy)][, gender_pon$sex == "M"] = NA
pon.new = rbind(pon.new, pon.copy)
# zeilen mit den eigentlichen X- und Y-chromosomen loeschen
pon.new = pon.new[!(pon.new$Chr == "chrX" | pon.new$Chr == "chrY"), ]
pon = pon.new
}
# Der PON-Tabelle Spalten mit mean und sd  zur weiteren Berechnungen geben
# "na.rm = TRUE", um die NA's, die durch die Geschlechter-Aufteilung entstehen,
# nicht in die Berechnung miteinzubeziehen
means_panel_of_normals <- function(pon) {
pon_means <- apply(pon[ , 6:(ncol(pon))], 1, function(x) mean(x, na.rm = TRUE))
pon_sd <- apply(pon[ , 6:(ncol(pon))], 1, function(x) sd(x, na.rm = TRUE))
return (cbind(pon, 'mean'=pon_means, 'sd'=pon_sd))
}
###################################################################################################
pon = panel_of_normals_normalization(pon)
pon = gendering_pon(pon, gender_pon)
pon = means_panel_of_normals(pon)
setwd(path.output)
write.table(pon, file = pon.table.name, sep = "\t", row.names = TRUE, col.names = NA)
path.to.programm = "/media/vera/big_data/coriandR"
path.output = "/media/vera/big_data/coriandR/tables/pon.size.detection/"
pon.table.name = "pon.marburg.6p.median.tsv"
setwd(path.to.programm)
pon = read.table("./tables/pon.size.detection/pon.marburg.6p.fc.tsv", header = TRUE, row.names = 1)
# grep('.bam', colnames(pon))
gender_pon = read.table("./tables/pon.size.detection/geschlechter.pon.marburg.6p.csv",
header = TRUE, sep = ",", row.names = 1)
pon = panel_of_normals_normalization(pon)
pon = gendering_pon(pon, gender_pon)
pon = means_panel_of_normals(pon)
setwd(path.output)
write.table(pon, file = pon.table.name, sep = "\t", row.names = TRUE, col.names = NA)
path.to.programm = "/media/vera/big_data/coriandR"
path.output = "/media/vera/big_data/coriandR/tables/pon.size.detection/"
pon.table.name = "pon.marburg.9p.median.tsv"
setwd(path.to.programm)
pon = read.table("./tables/pon.size.detection/pon.marburg.9p.fc.tsv", header = TRUE, row.names = 1)
# grep('.bam', colnames(pon))
gender_pon = read.table("./tables/pon.size.detection/geschlechter.pon.marburg.9p.csv",
header = TRUE, sep = ",", row.names = 1)
pon = panel_of_normals_normalization(pon)
pon = gendering_pon(pon, gender_pon)
pon = means_panel_of_normals(pon)
setwd(path.output)
write.table(pon, file = pon.table.name, sep = "\t", row.names = TRUE, col.names = NA)
path.to.programm = "/media/vera/big_data/coriandR"
path.output = "/media/vera/big_data/coriandR/tables/pon.size.detection/"
pon.table.name = "pon.marburg.12p.median.tsv"
setwd(path.to.programm)
pon = read.table("./tables/pon.size.detection/pon.marburg.12p.fc.tsv", header = TRUE, row.names = 1)
# grep('.bam', colnames(pon))
gender_pon = read.table("./tables/pon.size.detection/geschlechter.pon.marburg.12p.csv",
header = TRUE, sep = ",", row.names = 1)
###################################################################################################
pon = panel_of_normals_normalization(pon)
pon = gendering_pon(pon, gender_pon)
pon = means_panel_of_normals(pon)
setwd(path.output)
write.table(pon, file = pon.table.name, sep = "\t", row.names = TRUE, col.names = NA)
path.to.programm = "/media/vera/big_data/coriandR"
path.output = "/media/vera/big_data/coriandR/tables/pon.size.detection/"
pon.table.name = "pon.marburg.15p.median.tsv"
setwd(path.to.programm)
pon = read.table("./tables/pon.size.detection/pon.marburg.15p.fc.tsv", header = TRUE, row.names = 1)
# grep('.bam', colnames(pon))
gender_pon = read.table("./tables/pon.size.detection/geschlechter.pon.marburg.15p.csv",
header = TRUE, sep = ",", row.names = 1)
panel_of_normals_normalization <- function(pon) {
#pon_norm <- t(t(pon[ , 6:ncol(pon)]) / colSums(pon[ , 6:ncol(pon)])) * (pon[1, 3] - pon[1, 2] + 1)
# alter ansatz, jetzt normalisieren wir Ã¼ber median
pon_norm <- pon[ , 1:5]
for (c in 6:ncol(pon)) {
pon_norm[ , c] <- pon[ , c] / median(pon[ , c]) *2
}
#pon_norm <- cbind(pon[ , 1:5], pon_norm)
# Die laenge der bins wird aus der Differenz automatisch ermittelt
return(pon_norm)
}
# PON nach den Geschlechtern trennen
# Hierbei werden die X- und Y-Chromosome in 4 Chromosomen (chrX_F, chrX_M, chrY_F, chrY_M) aufgeteilt
# diese werden je nach Geschlecht mit den Werten aus der eigentlichen Patiententabelle gefÃ¼llt
gendering_pon <- function(pon, gender_pon) {
# gender_pon ist eine tabelle mit den spaltennamen im PON und mit den dazugehoerigen geschlechtern
# zuerst das X-Chromosom in chrX_F und chrX_M aufteilen
chrn = "chrX"
# in eine separate tabelle werden alle zeilen von x-chr reingepackt
pon.copy = pon[pon$Chr == chrn, ]
# allen zeilen wird der suffix "_M" zugewiesen
pon.copy$Chr = paste0(pon.copy$Chr, "_M")
# nur die maenner sollten die werte fuer chrX_M behalten
pon.copy[, 6:ncol(pon.copy)][, gender_pon$sex == "F"] = NA
pon.new = rbind(pon, pon.copy)
pon.copy = pon[pon$Chr == chrn, ]
pon.copy$Chr = paste0(pon.copy$Chr, "_F")
pon.copy[, 6:ncol(pon.copy)][, gender_pon$sex == "M"] = NA
# pon.new ist jetzt um 2 "X-chr" groesser
pon.new = rbind(pon.new, pon.copy)
# dann Y-Chromosom
chrn = "chrY"
pon.copy = pon[pon$Chr == chrn, ]
pon.copy$Chr = paste0(pon.copy$Chr, "_M")
pon.copy[, 6:ncol(pon.copy)][, gender_pon$sex == "F"] = NA
pon.new = rbind(pon.new, pon.copy)
pon.copy = pon[pon$Chr == chrn, ]
pon.copy$Chr = paste0(pon.copy$Chr, "_F")
pon.copy[, 6:ncol(pon.copy)][, gender_pon$sex == "M"] = NA
pon.new = rbind(pon.new, pon.copy)
# zeilen mit den eigentlichen X- und Y-chromosomen loeschen
pon.new = pon.new[!(pon.new$Chr == "chrX" | pon.new$Chr == "chrY"), ]
pon = pon.new
}
# Der PON-Tabelle Spalten mit mean und sd  zur weiteren Berechnungen geben
# "na.rm = TRUE", um die NA's, die durch die Geschlechter-Aufteilung entstehen,
# nicht in die Berechnung miteinzubeziehen
means_panel_of_normals <- function(pon) {
pon_means <- apply(pon[ , 6:(ncol(pon))], 1, function(x) mean(x, na.rm = TRUE))
pon_sd <- apply(pon[ , 6:(ncol(pon))], 1, function(x) sd(x, na.rm = TRUE))
return (cbind(pon, 'mean'=pon_means, 'sd'=pon_sd))
}
###################################################################################################
pon = panel_of_normals_normalization(pon)
pon = gendering_pon(pon, gender_pon)
pon = means_panel_of_normals(pon)
setwd(path.output)
write.table(pon, file = pon.table.name, sep = "\t", row.names = TRUE, col.names = NA)
